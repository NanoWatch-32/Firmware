/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_NANO_PROTOCOL_PB_H_INCLUDED
#define PB_NANO_PROTOCOL_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _nano_PacketType {
    nano_PacketType_UNKNOWN = 0,
    nano_PacketType_MEDIA_COMMAND = 1,
    nano_PacketType_MEDIA_INFO = 2
} nano_PacketType;

typedef enum _nano_MediaAction {
    nano_MediaAction_UNKNOWN_ACTION = 0,
    nano_MediaAction_PLAY = 1,
    nano_MediaAction_PAUSE = 2,
    nano_MediaAction_NEXT = 3,
    nano_MediaAction_PREVIOUS = 4,
    nano_MediaAction_STOP = 5
} nano_MediaAction;

/* Struct definitions */
typedef struct _nano_MediaCommand {
    nano_MediaAction action;
} nano_MediaCommand;

typedef struct _nano_MediaInfo {
    pb_callback_t title;
    pb_callback_t artist;
    pb_callback_t album;
    uint32_t duration_ms;
    uint32_t position_ms;
    bool is_playing;
} nano_MediaInfo;

typedef struct _nano_CommandPacket {
    nano_PacketType type;
    pb_size_t which_payload;
    union {
        nano_MediaCommand mediaCommand;
        nano_MediaInfo mediaInfo;
    } payload;
} nano_CommandPacket;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _nano_PacketType_MIN nano_PacketType_UNKNOWN
#define _nano_PacketType_MAX nano_PacketType_MEDIA_INFO
#define _nano_PacketType_ARRAYSIZE ((nano_PacketType)(nano_PacketType_MEDIA_INFO+1))

#define _nano_MediaAction_MIN nano_MediaAction_UNKNOWN_ACTION
#define _nano_MediaAction_MAX nano_MediaAction_STOP
#define _nano_MediaAction_ARRAYSIZE ((nano_MediaAction)(nano_MediaAction_STOP+1))

#define nano_MediaCommand_action_ENUMTYPE nano_MediaAction


#define nano_CommandPacket_type_ENUMTYPE nano_PacketType


/* Initializer values for message structs */
#define nano_MediaCommand_init_default           {_nano_MediaAction_MIN}
#define nano_MediaInfo_init_default              {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0}
#define nano_CommandPacket_init_default          {_nano_PacketType_MIN, 0, {nano_MediaCommand_init_default}}
#define nano_MediaCommand_init_zero              {_nano_MediaAction_MIN}
#define nano_MediaInfo_init_zero                 {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0}
#define nano_CommandPacket_init_zero             {_nano_PacketType_MIN, 0, {nano_MediaCommand_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define nano_MediaCommand_action_tag             1
#define nano_MediaInfo_title_tag                 1
#define nano_MediaInfo_artist_tag                2
#define nano_MediaInfo_album_tag                 3
#define nano_MediaInfo_duration_ms_tag           4
#define nano_MediaInfo_position_ms_tag           5
#define nano_MediaInfo_is_playing_tag            6
#define nano_CommandPacket_type_tag              1
#define nano_CommandPacket_mediaCommand_tag      2
#define nano_CommandPacket_mediaInfo_tag         3

/* Struct field encoding specification for nanopb */
#define nano_MediaCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    action,            1)
#define nano_MediaCommand_CALLBACK NULL
#define nano_MediaCommand_DEFAULT NULL

#define nano_MediaInfo_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   title,             1) \
X(a, CALLBACK, SINGULAR, STRING,   artist,            2) \
X(a, CALLBACK, SINGULAR, STRING,   album,             3) \
X(a, STATIC,   SINGULAR, UINT32,   duration_ms,       4) \
X(a, STATIC,   SINGULAR, UINT32,   position_ms,       5) \
X(a, STATIC,   SINGULAR, BOOL,     is_playing,        6)
#define nano_MediaInfo_CALLBACK pb_default_field_callback
#define nano_MediaInfo_DEFAULT NULL

#define nano_CommandPacket_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,mediaCommand,payload.mediaCommand),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,mediaInfo,payload.mediaInfo),   3)
#define nano_CommandPacket_CALLBACK NULL
#define nano_CommandPacket_DEFAULT NULL
#define nano_CommandPacket_payload_mediaCommand_MSGTYPE nano_MediaCommand
#define nano_CommandPacket_payload_mediaInfo_MSGTYPE nano_MediaInfo

extern const pb_msgdesc_t nano_MediaCommand_msg;
extern const pb_msgdesc_t nano_MediaInfo_msg;
extern const pb_msgdesc_t nano_CommandPacket_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define nano_MediaCommand_fields &nano_MediaCommand_msg
#define nano_MediaInfo_fields &nano_MediaInfo_msg
#define nano_CommandPacket_fields &nano_CommandPacket_msg

/* Maximum encoded size of messages (where known) */
/* nano_MediaInfo_size depends on runtime parameters */
/* nano_CommandPacket_size depends on runtime parameters */
#define NANO_PROTOCOL_PB_H_MAX_SIZE              nano_MediaCommand_size
#define nano_MediaCommand_size                   2

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
